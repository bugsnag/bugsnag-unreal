// Copyright 2021 Bugsnag. All Rights Reserved.

#pragma once

/**
 * Stateless information about the computer or device running the app.
 *
 * Can be amended from an OnError or OnSession callback if necessary.
 */
class BUGSNAG_API IBugsnagDevice
{
public:
	/**
	 * The Application Binary Interface used (Android only.)
	 */
	virtual const TSharedPtr<TArray<FString>> GetCpuAbi() const = 0;

	virtual void SetCpuAbi(const TSharedPtr<TArray<FString>>&) = 0;

	/**
	 * A unique ID generated by Bugsnag which uniquely identifies the device.
	 */
	virtual const TOptional<FString> GetId() const = 0;

	virtual void SetId(const TOptional<FString>&) = 0;

	/**
	 * Whether the device has been jailbroken.
	 */
	virtual TOptional<bool> GetJailbroken() const = 0;

	virtual void SetJailbroken(const TOptional<bool>&) = 0;

	/**
	 * The IETF language tag of the locale used.
	 */
	virtual const TOptional<FString> GetLocale() const = 0;

	virtual void SetLocale(const TOptional<FString>&) = 0;

	/**
	 * The model number of the device used.
	 */
	virtual const TOptional<FString> GetModelNumber() const = 0;

	virtual void SetModelNumber(const TOptional<FString>&) = 0;

	/**
	 * The manufacturer of the device used.
	 */
	virtual const TOptional<FString> GetManufacturer() const = 0;

	virtual void SetManufacturer(const TOptional<FString>&) = 0;

	/**
	 * The model name of the device used.
	 */
	virtual const TOptional<FString> GetModel() const = 0;

	virtual void SetModel(const TOptional<FString>&) = 0;

	/**
	 * The name of the operating system running on the device used.
	 */
	virtual const TOptional<FString> GetOsName() const = 0;

	virtual void SetOsName(const TOptional<FString>&) = 0;

	/**
	 * The version of the operating system running on the device used.
	 */
	virtual const TOptional<FString> GetOsVersion() const = 0;

	virtual void SetOsVersion(const TOptional<FString>&) = 0;

	/**
	 * A collection of names and their versions of the primary languages,
	 * frameworks or runtimes that the application is running on.
	 */
	virtual const TSharedPtr<TMap<FString, FString>> GetRuntimeVersions() const = 0;

	virtual void SetRuntimeVersions(const TSharedPtr<TMap<FString, FString>>&) = 0;

	/**
	 * The total RAM size of the device (in bytes.)
	 */
	virtual const TOptional<uint64> GetTotalMemory() const = 0;

	virtual void SetTotalMemory(const TOptional<uint64>&) = 0;
};
